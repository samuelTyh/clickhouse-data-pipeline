services:
  # -------------------------------------
  # PostgreSQL
  # -------------------------------------
  postgres:
    image: postgres:17
    container_name: psql_source
    env_file: .env
    ports:
      - "6543:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_INITDB_ARGS: "--data-checksums"
    command: >
      postgres
        -c wal_level=logical
        -c max_wal_senders=10
        -c max_replication_slots=10
        -c shared_preload_libraries=wal2json
        -c hot_standby=on
        -c max_connections=100
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5

  # pgadmin:
  #   image: dpage/pgadmin4
  #   container_name: pgadmin
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@example.com
  #     PGADMIN_DEFAULT_PASSWORD: admin
  #     PGADMIN_CONFIG_SERVER_MODE: "False"
  #   ports:
  #     - "5050:80"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #       restart: true

  # -------------------------------------
  # ClickHouse
  # -------------------------------------
  clickhouse:
    image: clickhouse/clickhouse-server
    container_name: ch_analytics
    env_file: .env
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    ports:
      - "8124:8123"
      - "9001:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 5s
      retries: 5

  # -------------------------------------
  # Flyway Migrations
  # -------------------------------------
  flyway:
    image: flyway/flyway
    container_name: db_migrations
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    command: -url=jdbc:postgresql://postgres:5432/postgres -user=postgres -locations=filesystem:/flyway/sql migrate
    volumes:
      - ./seeder/migrations/:/flyway/sql
    environment:
      FLYWAY_CONNECT_RETRIES: 10

  # -------------------------------------
  # Data Seeder
  # -------------------------------------
  seeder:
    build:
      context: ./seeder
      dockerfile: Dockerfile.seeder
    container_name: data_seeder
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      flyway:
        condition: service_completed_successfully

  # -------------------------------------
  # ETL Service
  # -------------------------------------
  etl:
    build:
      context: ./etl
      dockerfile: Dockerfile.etl
    container_name: adtech_etl
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      clickhouse:
        condition: service_healthy
        restart: true
      seeder:
        condition: service_completed_successfully
    env_file: .env
    volumes:
      - ./etl:/app

  # -------------------------------------
  # Zookeeper
  # -------------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 3

  # -------------------------------------
  # Kafka
  # -------------------------------------
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 3

  # -------------------------------------
  # Debezium Connect (for CDC)
  # -------------------------------------
  debezium:
    image: debezium/connect:2.5
    container_name: debezium_connect
    ports:
      - "8083:8083"
    environment:
      GROUP_ID: 1
      BOOTSTRAP_SERVERS: kafka:9092
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 10s
      timeout: 5s
      retries: 3


volumes:
  postgres_data:
  clickhouse_data:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
